name: 打包并发布

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 准备变量
        id: vars
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          MODULE_ID="Xiaomi13ProPatch"
          ZIP_FILENAME="${MODULE_ID}_${TAG_NAME}.zip"
          UPDATE_JSON_PATH="update.json"
          CHANGELOG_PATH="CHANGELOG.md"
          MODULE_PROP_PATH="module.prop"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          DEFAULT_BRANCH="main"

          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "ZIP_FILENAME=${ZIP_FILENAME}" >> $GITHUB_OUTPUT
          echo "MODULE_ID=${MODULE_ID}" >> $GITHUB_OUTPUT
          echo "UPDATE_JSON_PATH=${UPDATE_JSON_PATH}" >> $GITHUB_OUTPUT
          echo "CHANGELOG_PATH=${CHANGELOG_PATH}" >> $GITHUB_OUTPUT
          echo "MODULE_PROP_PATH=${MODULE_PROP_PATH}" >> $GITHUB_OUTPUT # 输出 module.prop 路径
          echo "REPO_OWNER=${REPO_OWNER}" >> $GITHUB_OUTPUT
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "DEFAULT_BRANCH=${DEFAULT_BRANCH}" >> $GITHUB_OUTPUT
          DOWNLOAD_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/download/${TAG_NAME}/${ZIP_FILENAME}"
          echo "DOWNLOAD_URL=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT

      - name: 提取更新日志
        id: changelog
        run: |
          echo "正在从 ${{ steps.vars.outputs.CHANGELOG_PATH }} 提取版本 ${{ steps.vars.outputs.TAG_NAME }} 的更新日志..."
          LOG_NOTES=$(awk '/^##\s*'${{ steps.vars.outputs.TAG_NAME }}'/{ f=1; next } /^##\s*v?[0-9]/{ f=0 } f' ${{ steps.vars.outputs.CHANGELOG_PATH }} | sed '${/^$/d;}')

          if [ -z "$LOG_NOTES" ]; then
            echo "警告：未能在 ${{ steps.vars.outputs.CHANGELOG_PATH }} 中找到版本 ${{ steps.vars.outputs.TAG_NAME }} 的更新日志。"
            LOG_NOTES="自动发布版本 ${{ steps.vars.outputs.TAG_NAME }}。"
          else
            echo "成功提取到更新日志。"
            echo "log_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$LOG_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: 打包 Magisk 模块
        run: |
          echo "开始打包模块..."

          if [ ! -f module.prop ]; then
            if [ ! -f ../${{ steps.vars.outputs.MODULE_PROP_PATH }} ]; then
              echo "错误：找不到 module.prop 文件！请确保路径正确。"
              exit 1
            fi
          fi

          zip -r9 ${{ steps.vars.outputs.ZIP_FILENAME }} . -x ".git*" ".github*" "README.md" "CHANGELOG.md" "update.json"

          echo "打包完成: ${{ steps.vars.outputs.ZIP_FILENAME }}"

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.vars.outputs.ZIP_FILENAME }}
          tag_name: ${{ steps.vars.outputs.TAG_NAME }}
          name: ${{ steps.vars.outputs.TAG_NAME }}
          body: ${{ steps.changelog.outputs.log_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新并提交 update.json
        run: |
          echo "准备更新 ${{ steps.vars.outputs.UPDATE_JSON_PATH }}..."

          MODULE_PROP_FILE="${{ steps.vars.outputs.MODULE_PROP_PATH }}"
          echo "正在从 ${MODULE_PROP_FILE} 读取 versionCode..."

          if [ ! -f "$MODULE_PROP_FILE" ]; then
            echo "错误：找不到 module.prop 文件于路径: ${MODULE_PROP_FILE}"
            exit 1
          fi

          MODULE_VERSION_CODE=$(grep '^versionCode=' "$MODULE_PROP_FILE" | cut -d'=' -f2)

          if [[ -z "$MODULE_VERSION_CODE" ]] || ! [[ "$MODULE_VERSION_CODE" =~ ^[0-9]+$ ]]; then
            echo "错误：未能从 ${MODULE_PROP_FILE} 读取到有效的 versionCode。"
            exit 1
          else
            echo "从 module.prop 读取到的 versionCode: ${MODULE_VERSION_CODE}"
          fi

          if [ ! -f "${{ steps.vars.outputs.UPDATE_JSON_PATH }}" ]; then
            echo "警告：未找到 ${{ steps.vars.outputs.UPDATE_JSON_PATH }}，将创建一个新的。"
            echo '{
              "version": "",
              "versionCode": 0,
              "zipUrl": "",
              "changelog": "https://raw.githubusercontent.com/${{ steps.vars.outputs.REPO_OWNER }}/${{ steps.vars.outputs.REPO_NAME }}/${{ steps.vars.outputs.DEFAULT_BRANCH }}/${{ steps.vars.outputs.CHANGELOG_PATH }}"
            }' > ${{ steps.vars.outputs.UPDATE_JSON_PATH }}
          fi

          jq \
            --arg version "${{ steps.vars.outputs.TAG_NAME }}" \
            --argjson versionCode "$MODULE_VERSION_CODE" \
            --arg zipUrl "${{ steps.vars.outputs.DOWNLOAD_URL }}" \
            '.version = $version | .versionCode = $versionCode | .zipUrl = $zipUrl' \
            ${{ steps.vars.outputs.UPDATE_JSON_PATH }} > tmp_update.json && mv tmp_update.json ${{ steps.vars.outputs.UPDATE_JSON_PATH }}

          echo "更新后的 ${{ steps.vars.outputs.UPDATE_JSON_PATH }}:"
          cat ${{ steps.vars.outputs.UPDATE_JSON_PATH }}

          echo "提交更新到 ${{ steps.vars.outputs.DEFAULT_BRANCH }} 分支..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add ${{ steps.vars.outputs.UPDATE_JSON_PATH }}

          if git diff --staged --quiet; then
            echo "update.json 没有变化，无需提交。"
          else
            git commit -m "更新 ${{ steps.vars.outputs.TAG_NAME }} update.json"

            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ steps.vars.outputs.REPO_OWNER }}/${{ steps.vars.outputs.REPO_NAME }}.git HEAD:${{ steps.vars.outputs.DEFAULT_BRANCH }}
            echo "update.json 已成功提交并推送到 ${{ steps.vars.outputs.DEFAULT_BRANCH }} 分支。"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}